# Use Debian Slim as a base image
FROM debian:bullseye-slim

# Define port range variable
ENV PORT_RANGE="8001 8008"

# Install Apache, PHP 8.3 from Sury repository, Git, Node.js, MySQL, and necessary utilities
RUN apt-get update && apt-get install -y lsb-release apt-transport-https ca-certificates wget && \
    wget -O - https://packages.sury.org/php/apt.gpg | tee /etc/apt/trusted.gpg.d/php.gpg && \
    echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/php.list && \
    apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    apache2 \
    php8.3 \
    php8.3-cli \
    php8.3-mbstring \
    php8.3-xml \
    php8.3-curl \
    php8.3-zip \
    php8.3-mysql \
    php8.3-sqlite3 \
    libapache2-mod-php8.3 \
    git \
    apache2-utils \
    curl \
    mariadb-server \
    && curl -fsSL https://deb.nodesource.com/setup_16.x | bash - \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Composer
RUN apt-get update && apt-get install -y curl && \
    curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install pm2 to run multiple processes
RUN npm install -g pm2

# Copy SSL certificates
COPY ssl/git.crt /etc/apache2/ssl/git.crt
COPY ssl/git.key /etc/apache2/ssl/git.key
COPY ssl/ca.crt /etc/apache2/ssl/ca.crt

# Copy the Apache configuration
COPY apache.conf /etc/apache2/sites-available/000-default.conf

# Create the Git repository directory and copy the repository
COPY repositories/nexuskul-core.git /var/www/git/nexuskul-core.git
COPY repositories/nexuskul-modules.git /var/www/git/nexuskul-modules.git

# Loop to copy the repository if it doesn't already exist
RUN for i in $(seq $PORT_RANGE); do \
    if [ ! -d "/var/www/git/dev_${i}_org" ]; then \
    cp -r /var/www/git/nexuskul-modules.git /var/www/git/dev_${i}_org; \
    git config --global --add safe.directory /var/www/git/dev_${i}_org; \
    fi; \
    done

# Add post-receive hooks to the bare repositories to push the latest changes to the corresponding working repository
RUN for i in $(seq $PORT_RANGE); do \
    bare_repo="/var/www/git/dev_${i}_org/hooks"; \
    echo '#!/bin/bash' > "$bare_repo/post-receive"; \
    echo 'repo_number=$(basename $(pwd) | sed '\''s/[^0-9]//g'\'')' >> "$bare_repo/post-receive"; \
    echo 'TARGET="/var/www/html/dev_${repo_number}_org/modules"' >> "$bare_repo/post-receive"; \
    echo 'GIT_DIR="/var/www/git/dev_${repo_number}_org"' >> "$bare_repo/post-receive"; \
    echo 'git --work-tree=$TARGET --git-dir=$GIT_DIR checkout -f' >> "$bare_repo/post-receive"; \
    chmod +x "$bare_repo/post-receive"; \
    done

# Loop to clone the repository if it doesn't already exist
RUN for i in $(seq $PORT_RANGE); do \
    if [ ! -d "/var/www/html/dev_${i}_org/modules" ]; then \
    git clone /var/www/git/nexuskul-core.git /var/www/html/dev_${i}_org; \
    git clone /var/www/git/dev_${i}_org /var/www/html/dev_${i}_org/modules; \
    git config --global --add safe.directory /var/www/html/dev_${i}_org/modules; \
    git config --global --add safe.directory /var/www/html/dev_${i}_org; \
    fi; \
    if [ ! -f /var/www/html/dev_${i}_org/.env ]; then \
    cp /var/www/html/dev_${i}_org/.env.example /var/www/html/dev_${i}_org/.env; \
    sed -i "s/DB_HOST=.*/DB_HOST=127.0.0.1/" /var/www/html/dev_${i}_org/.env; \
    sed -i "s/DB_DATABASE=.*/DB_DATABASE=central_database_${i}/" /var/www/html/dev_${i}_org/.env; \
    sed -i "s/DB_USERNAME=.*/DB_USERNAME=root/" /var/www/html/dev_${i}_org/.env; \
    sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=/" /var/www/html/dev_${i}_org/.env; \
    fi; \
    done

# Set up Git user
RUN git config --global user.email "cvcup@gmail.com"
RUN git config --global user.name "Rakesh Kumar"

# Create MySQL databases for each instance
RUN service mariadb start && \
    mysqladmin -u root password '' && \
    for i in $(seq $PORT_RANGE); do \
    mariadb -u root -e "CREATE DATABASE IF NOT EXISTS central_database_${i}; \
                        GRANT ALL PRIVILEGES ON central_database_${i}.* TO 'root'@'localhost';"; \
    done

# Fix permissions for the repositories and web directories
RUN chown -R www-data:www-data /var/www/git && chmod -R 775 /var/www/git
RUN chown -R www-data:www-data /var/www/html && chmod -R 775 /var/www/html

# Copy and set permissions for node_modules and vendor directories
COPY --chown=www-data:www-data ./node_modules/ /var/www/html/dev_8001_org/node_modules/
COPY --chown=www-data:www-data ./vendor/ /var/www/html/dev_8001_org/vendor/

COPY --chown=www-data:www-data ./node_modules/ /var/www/html/dev_8002_org/node_modules/
COPY --chown=www-data:www-data ./vendor/ /var/www/html/dev_8002_org/vendor/

COPY --chown=www-data:www-data ./node_modules/ /var/www/html/dev_8003_org/node_modules/
COPY --chown=www-data:www-data ./vendor/ /var/www/html/dev_8003_org/vendor/

COPY --chown=www-data:www-data ./node_modules/ /var/www/html/dev_8004_org/node_modules/
COPY --chown=www-data:www-data ./vendor/ /var/www/html/dev_8004_org/vendor/

COPY --chown=www-data:www-data ./node_modules/ /var/www/html/dev_8005_org/node_modules/
COPY --chown=www-data:www-data ./vendor/ /var/www/html/dev_8005_org/vendor/

COPY --chown=www-data:www-data ./node_modules/ /var/www/html/dev_8006_org/node_modules/
COPY --chown=www-data:www-data ./vendor/ /var/www/html/dev_8006_org/vendor/

COPY --chown=www-data:www-data ./node_modules/ /var/www/html/dev_8007_org/node_modules/
COPY --chown=www-data:www-data ./vendor/ /var/www/html/dev_8007_org/vendor/

COPY --chown=www-data:www-data ./node_modules/ /var/www/html/dev_8008_org/node_modules/
COPY --chown=www-data:www-data ./vendor/ /var/www/html/dev_8008_org/vendor/

RUN for i in $(seq $PORT_RANGE); do \
    if [ -d "/var/www/html/dev_${i}_org" ]; then \
    cd /var/www/html/dev_${i}_org && composer install --no-interaction --verbose && php artisan key:generate; \
    fi; \
    done

# Install Laravel Breeze and run npm install
RUN for i in $(seq $PORT_RANGE); do \
    if [ -d "/var/www/html/dev_${i}_org" ]; then \
    cd /var/www/html/dev_${i}_org && npm install; \
    fi; \
    done
    
# Create a start script to run both npm run dev and php artisan serve using pm2
RUN for i in $(seq $PORT_RANGE); do \
    if [ -d "/var/www/html/dev_${i}_org" ]; then \
        cd /var/www/html/dev_${i}_org && \
        # Calculate the port for Vite by subtracting 5000 from $i
        vite_port=$((i - 5000)) && \
        # Assign the Vite server to the calculated port
        echo "pm2 start npm --name 'npm_dev_${i}' -- run dev -- --port ${vite_port}" > start.sh && \
        # Use $i as the dynamic port for artisan serve
        echo "pm2 start php --name 'artisan_serve_${i}' -- artisan serve --host=0.0.0.0 --port=${i}" >> start.sh && \
        chmod +x start.sh; \
    fi; \
done

# Set up HTTP authentication
RUN htpasswd -cb /etc/apache2/.htpasswd nexuskul nexuskul

# Enable necessary Apache modules
RUN a2enmod cgi alias env ssl rewrite

CMD service mariadb start && \
    mysqladmin -u root password '' && \
    apache2ctl -D FOREGROUND & \
    for i in $(seq $PORT_RANGE); do \
        cd /var/www/html/dev_${i}_org && \
        ./start.sh; \
        php artisan migrate:central --fresh && \
        php artisan seed:central && \
        php artisan migrate:schools --fresh && \
        php artisan seed:schools; \
    done && \
    pm2 logs

# Expose port 443 for HTTPS
EXPOSE 443 8000 5173 8000 8001 8002 8003 8004 8005 8006 8007 8008 8009 8010 8011 8012 8013 8014 8015 8016 8017 8018 8019 8020 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020